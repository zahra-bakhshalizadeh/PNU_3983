1
00:00:00,719 --> 00:00:05,680
a big part of building a schedule is

2
00:00:02,639 --> 00:00:08,320
getting tasks in the right order

3
00:00:05,680 --> 00:00:09,120
meal time goes a lot better when you

4
00:00:08,320 --> 00:00:12,000
cook dinner

5
00:00:09,120 --> 00:00:12,559
before you eat it by putting tasks in

6
00:00:12,000 --> 00:00:15,679
order

7
00:00:12,559 --> 00:00:16,240
you turn your wbs into a sequence that

8
00:00:15,679 --> 00:00:19,279
defines

9
00:00:16,240 --> 00:00:21,840
when project work should occur

10
00:00:19,279 --> 00:00:22,720
in the project management world network

11
00:00:21,840 --> 00:00:25,039
diagram

12
00:00:22,720 --> 00:00:27,279
is the name for the diagram that shows

13
00:00:25,039 --> 00:00:30,080
the sequence of tasks

14
00:00:27,279 --> 00:00:30,720
each task appears in a box with the task

15
00:00:30,080 --> 00:00:34,239
name

16
00:00:30,720 --> 00:00:35,360
and perhaps other task info arrows drawn

17
00:00:34,239 --> 00:00:38,559
between boxes

18
00:00:35,360 --> 00:00:40,480
shows how the tasks are linked

19
00:00:38,559 --> 00:00:42,879
even if you build the sequence by

20
00:00:40,480 --> 00:00:46,320
putting sticky notes up on a whiteboard

21
00:00:42,879 --> 00:00:48,879
you're creating a network diagram

22
00:00:46,320 --> 00:00:49,520
the links between tasks aren't just

23
00:00:48,879 --> 00:00:52,559
about

24
00:00:49,520 --> 00:00:53,520
which task starts first a task

25
00:00:52,559 --> 00:00:56,399
dependency

26
00:00:53,520 --> 00:00:57,440
is when one task controls the timing of

27
00:00:56,399 --> 00:01:00,079
another

28
00:00:57,440 --> 00:01:01,280
the task in control is called a

29
00:01:00,079 --> 00:01:03,920
predecessor

30
00:01:01,280 --> 00:01:05,439
and the one being controlled is the

31
00:01:03,920 --> 00:01:08,000
successor

32
00:01:05,439 --> 00:01:08,560
each task has a start and finish so

33
00:01:08,000 --> 00:01:12,000
there are

34
00:01:08,560 --> 00:01:14,080
four types of task dependencies

35
00:01:12,000 --> 00:01:15,439
finish to start dependencies are the

36
00:01:14,080 --> 00:01:18,400
most common

37
00:01:15,439 --> 00:01:20,080
the finish of one task controls when the

38
00:01:18,400 --> 00:01:22,880
other task starts

39
00:01:20,080 --> 00:01:25,040
for example you have to analyze the

40
00:01:22,880 --> 00:01:28,720
current scheduling processes

41
00:01:25,040 --> 00:01:31,200
before you can start designing new ones

42
00:01:28,720 --> 00:01:32,720
a finish to finish dependency means the

43
00:01:31,200 --> 00:01:35,360
finish of one task

44
00:01:32,720 --> 00:01:36,079
controls the finish of the other for

45
00:01:35,360 --> 00:01:38,400
example

46
00:01:36,079 --> 00:01:39,200
the dev team finishing the scheduling

47
00:01:38,400 --> 00:01:41,439
features

48
00:01:39,200 --> 00:01:42,640
controls when they finish testing the

49
00:01:41,439 --> 00:01:45,200
features

50
00:01:42,640 --> 00:01:47,920
with a small delay to test those last

51
00:01:45,200 --> 00:01:50,640
bits of customization

52
00:01:47,920 --> 00:01:51,600
start to start means that the start of

53
00:01:50,640 --> 00:01:54,240
one activity

54
00:01:51,600 --> 00:01:55,360
triggers the start of the other this

55
00:01:54,240 --> 00:01:57,680
dependency type

56
00:01:55,360 --> 00:01:59,439
can cause trouble if the predecessor

57
00:01:57,680 --> 00:02:02,799
takes longer than it's supposed to

58
00:01:59,439 --> 00:02:05,040
as shown here if writing takes longer

59
00:02:02,799 --> 00:02:07,600
the reviewing task looks like it

60
00:02:05,040 --> 00:02:09,679
finishes before writing does

61
00:02:07,600 --> 00:02:10,879
that would mean either some writing

62
00:02:09,679 --> 00:02:13,280
isn't reviewed

63
00:02:10,879 --> 00:02:15,360
or the reviewers have to wait until the

64
00:02:13,280 --> 00:02:18,000
writing is done

65
00:02:15,360 --> 00:02:18,959
in this example the correct logic is

66
00:02:18,000 --> 00:02:21,840
actually

67
00:02:18,959 --> 00:02:22,800
finish to finish with a finish to finish

68
00:02:21,840 --> 00:02:25,840
dependency

69
00:02:22,800 --> 00:02:26,959
if the writing finish date is delayed so

70
00:02:25,840 --> 00:02:30,560
is the finished date

71
00:02:26,959 --> 00:02:33,280
for reviewing an example of a

72
00:02:30,560 --> 00:02:34,720
true start to start dependency is

73
00:02:33,280 --> 00:02:37,360
pouring concrete and

74
00:02:34,720 --> 00:02:38,480
troweling it because concrete hardens

75
00:02:37,360 --> 00:02:41,599
with time

76
00:02:38,480 --> 00:02:45,680
the start of pouring concrete controls

77
00:02:41,599 --> 00:02:46,879
when traveling starts start to finish

78
00:02:45,680 --> 00:02:49,360
dependencies

79
00:02:46,879 --> 00:02:52,400
don't occur very often that's a good

80
00:02:49,360 --> 00:02:54,720
thing because they can be confusing

81
00:02:52,400 --> 00:02:56,400
the start of one task triggers the

82
00:02:54,720 --> 00:02:59,599
finish of another

83
00:02:56,400 --> 00:03:01,599
so the task and control occurs after the

84
00:02:59,599 --> 00:03:04,400
one it controls

85
00:03:01,599 --> 00:03:05,440
consider the shifts at a retail store

86
00:03:04,400 --> 00:03:07,680
the first shift

87
00:03:05,440 --> 00:03:08,560
can't finish until the clerk for the

88
00:03:07,680 --> 00:03:11,760
second shift

89
00:03:08,560 --> 00:03:14,400
shows up you can figure out which type

90
00:03:11,760 --> 00:03:15,840
of dependency to use by asking a few

91
00:03:14,400 --> 00:03:18,879
questions

92
00:03:15,840 --> 00:03:21,200
which task controls the other

93
00:03:18,879 --> 00:03:22,560
that tells you which task is the

94
00:03:21,200 --> 00:03:24,480
predecessor

95
00:03:22,560 --> 00:03:26,239
does the start or finish date of the

96
00:03:24,480 --> 00:03:29,360
first task control

97
00:03:26,239 --> 00:03:31,599
the second task that identifies whether

98
00:03:29,360 --> 00:03:33,280
the dependency begins with start or

99
00:03:31,599 --> 00:03:35,680
finish

100
00:03:33,280 --> 00:03:36,480
does the predecessor control the start

101
00:03:35,680 --> 00:03:39,440
or finish

102
00:03:36,480 --> 00:03:40,159
of the successor that identifies whether

103
00:03:39,440 --> 00:03:42,400
the second

104
00:03:40,159 --> 00:03:44,000
half of the dependency is start or

105
00:03:42,400 --> 00:03:46,640
finish

106
00:03:44,000 --> 00:03:48,400
adding task dependencies to your tasks

107
00:03:46,640 --> 00:03:51,920
in a network diagram

108
00:03:48,400 --> 00:03:53,599
gets your project tasks into sequence

109
00:03:51,920 --> 00:03:56,400
now that you know all the dependency

110
00:03:53,599 --> 00:03:56,959
types build a network diagram for the

111
00:03:56,400 --> 00:04:03,439
tasks

112
00:03:56,959 --> 00:04:03,439
in the partial wbs in the exercise files

