0 
 00:00:00,0 --> 00:00:05,0 
 https://git.ir/ 
  
 1 
 00:00:00,05 --> 00:00:03,05 
 - [راوی] پایتون یک مدل آزمایش واحد ساخته شده دارد 
  
 2 
 00:00:03,05 --> 00:00:06,03 
 بسیار خوب است و می توانید به طور موثری از آن استفاده کنید 
  
 3 
 00:00:06,03 --> 00:00:09,00 
 با این حال ، واحد ترین است که به شدت مبتنی بر 
  
 4 
 00:00:09,00 --> 00:00:10,08 
 کتابخانه مشابه جاوا و 
  
 5 
 00:00:10,08 --> 00:00:13,01 
 احساس خیلی (پیگونیک) خوبی  نمی کند 
  
 6 
 00:00:13,01 --> 00:00:15,09 
 من ترجیح می دهم از شخص ثالث ، Pytest استفاده کنم. 
  
 7 
 00:00:15,09 --> 00:00:19,09 
 به غیر از احساس pythonic بیشتر در  ، 
  
 8 
 00:00:19,09 --> 00:00:23,00 
 Pytest دارای یک اکوسیستم پر جنب و جوش است که دارای پلاگین های زیادی است 
  
 9 
 00:00:23,00 --> 00:00:25,04 
 برای محک ، ادغام مداوم ، 
  
 10 
 00:00:25,04 --> 00:00:27,03 
 fuzing و موارد دیگر. 
  
 11 
 00:00:27,03 --> 00:00:30,00 
 اگر قبلاً تست هایی دارید که در آزمون واحد نوشته شده است ، 
  
 12 
 00:00:30,00 --> 00:00:31,05 
 نیازی به تغییر آنها نیست 
  
 13 
 00:00:31,05 --> 00:00:34,06 
 Pytest می داند که چگونه می تواند تست های واحد را انجام دهد. 
  
 14 
 00:00:34,06 --> 00:00:36,08 
 فرض کنید که شما نوشتید ، "یک کتابخانه ریاضی کوچک" ، 
  
 15 
 00:00:36,08 --> 00:00:40,00 
 که sqrt را نشان می دهد ، عملکرد ریشه مربع ، 
  
 16 
 00:00:40,00 --> 00:00:43,02 
 و شما می خواهم آن را تست کنید. 
  
 17 
 00:00:43,02 --> 00:00:48,03 
 در test / test_mathlib.py ، تست ها را داریم. 
  
 18 
 00:00:48,03 --> 00:00:52,09 
 اولین تست یک تست بسیار ساده است ، test_sqrt. 
  
 19 
 00:00:52,09 --> 00:00:55,07 
 مقدار n را 2 ، مقدار مورد انتظار تعریف می کنیم 
  
 20 
 00:00:55,07 --> 00:00:58,06 
 مقدار 1.4142 و مقدار باشد ، 
  
 21 
 00:00:58,06 --> 00:01:02,00 
 مقدار بازده از عملکرد sqrt ماست. 
  
 22 
 00:01:02,00 --> 00:01:05,00 
 و درست پس از آن ، ما مقایسه واقعی را انجام می دهیم. 
  
 23 
 00:01:05,00 --> 00:01:07,00 
 ما مطمئن هستیم که مقدار انتظار می رود 
  
 24 
 00:01:07,00 --> 00:01:09,00 
 برابر با 4 برابر ارزش است. 
  
 25 
 00:01:09,00 --> 00:01:11,00 
 از آنجا که ما با نقاط شناور سر و کار داریم 
  
 26 
 00:01:11,00 --> 00:01:13,03 
 ما باید آنها را دور بزنیم 
  
 27 
 00:01:13,03 --> 00:01:15,02 
 و ما پیکان پیکان را تعریف کردیم ، 
  
 28 
 00:01:15,02 --> 00:01:17,02 
 که هنگام جستجو بسیار مفید است 
  
 29 
 00:01:17,02 --> 00:01:19,00 
 در خروجی آزمون 
  
 30 
 00:01:19,00 --> 00:01:21,02 
 بیایید تست ها را اجرا کنیم ، 
  
 31 
 00:01:21,02 --> 00:01:24,06 
 python -m pytest و ما آن را می گوییم 
  
 32 
 00:01:24,06 --> 00:01:27,07 
 که تست ها در مدیر آزمون است. 
  
 33 
 00:01:27,07 --> 00:01:31,04 
 و ما برای تمام آزمایشات در حال اجرا نقاط خواهیم دید. 
  
 34 
 00:01:31,04 --> 00:01:34,04 
 می توانید پارامتر -v و اکنون اضافه کنید 
  
 35 
 00:01:34,04 --> 00:01:38,06 
 ما اسمی از تست های در حال اجرا دریافت خواهیم کرد. 
  
 36 
 00:01:38,06 --> 00:01:39,09 
 مواقعی وجود دارد که ما دوست داریم 
  
 37 
 00:01:39,09 --> 00:01:42,09 
 عملکرد مشابه را با چندین ورودی تست کنید ، 
  
 38 
 00:01:42,09 --> 00:01:44,05 
 مانند ما در خط 13. 
  
 39 
 00:01:44,05 --> 00:01:46,09 
 موارد ریشه مربع برای 1 مورد 1 است ، 
  
 40 
 00:01:46,09 --> 00:01:52,00 
 برای 2 ما 1.4142 دریافت می کنیم و برای 4 باید 2 را بدست می آوریم. 
  
 41 
 00:01:52,00 --> 00:01:53,07 
 برای این کار می توانیم از دکوراتور استفاده کنیم ، 
  
 42 
 00:01:53,07 --> 00:01:56,09 
 pytest.mark.parametrize. 
  
 43 
 00:01:56,09 --> 00:01:58,07 
 ما به آن رشته ای با نام ها می دهیم 
  
 44 
 00:01:58,07 --> 00:02:01,08 
 پارامترها و موارد آزمون. 
  
 45 
 00:02:01,08 --> 00:02:03,07 
 و ما یک تابع تست را تعریف می کنیم که اکنون 
  
 46 
 00:02:03,07 --> 00:02:07,04 
 پارامترهایی را در رشته تعریف می کند. 
  
 47 
 00:02:07,04 --> 00:02:09,00 
 سپس ما در خط 22 انجام می دهیم ، مقدار برابر است 
  
 48 
 00:02:09,00 --> 00:02:12,09 
 آزمون mathlib.sqrt و مقدار مورد انتظار 
  
 49 
 00:02:12,09 --> 00:02:16,02 
 برابر با مقدار دور و دوباره ، 
  
 50 
 00:02:16,02 --> 00:02:19,05 
 و پیغام پیکان مهم است. 
  
 51 
 00:02:19,05 --> 00:02:21,07 
 متوجه شدید وقتی آزمون را اجرا می کنیم ، 
  
 52 
 00:02:21,07 --> 00:02:24,05 
 ما در واقع سه آزمایش مختلف را مشاهده می کنیم. 
  
 53 
 00:02:24,05 --> 00:02:28,00 
 یکی برای هر مورد آزمایشی که داشتیم. 
  
 54 
 00:02:28,00 --> 00:02:30,05 
 شما همچنین می توانید فقط یک آزمون واحد را اجرا کنید ، 
  
 55 
 00:02:30,05 --> 00:02:36,07 
 آزمون های python -m pytest -v / test mathlib.py 
  
 56 
 00:02:36,07 --> 00:02:39,05 
 و سپس یک مقداردو برابر می شود و می توانیم بگوییم 
  
 57 
 00:02:39,05 --> 00:02:44,00 
 فقط یک تست مربع ، برای اجرای فقط یک آزمون واحد. 
  
 58 
 00:02:44,00 --> 00:02:47,01 
 بیشتر ایده های مدرن مانند PyCharm ، 
  
 59 
 00:02:47,01 --> 00:02:49,00 
 با pytest ادغام خوبی داشته باشید. 
  
 60 
 00:02:49,00 --> 00:02:52,00 
 ما در مورد نحوه انتخاب یک تست آزمایشی اظهار نظر داریم. 
  
  
