  
 0 
 00:00:00,0 --> 00:00:05,0 
 https://git.ir/ ترجمه سید علی محترمی
  
 1 
 00:00:00,05 --> 00:00:01,04 
 - [مربی] کنترل منبع ، 
  
 2 
 00:00:01,04 --> 00:00:05,04 
 سیستم کنترل نسخه که گاهی به عنوان VCS شناخته می شود 
  
 3 
 00:00:05,04 --> 00:00:07,05 
 همان چیزی است که تاریخچه کد را نگه می دارد. 
  
 4 
 00:00:07,05 --> 00:00:11,01 
 اما برای آن بسیار مهمتر است ، به چندین توسعه دهنده اجازه می دهد 
  
 5 
 00:00:11,01 --> 00:00:13,09 
 با هم در همان پایه کد کار کنید. 
  
 6 
 00:00:13,09 --> 00:00:15,08 
 بسیاری از سیستم های کنترل منبع وجود دارد ، 
  
 7 
 00:00:15,08 --> 00:00:18,02 
 Git, Subversion, Mercurial, Perforce,
  
 8 
 00:00:18,02 --> 00:00:21,02 
 خدمات بنیاد تیم و دیگران. 
  
 9 
 00:00:21,02 --> 00:00:24,03 
 کسی که در حال حاضر بیشترین پرتاب را دارد Git است 
  
 10 
 00:00:24,03 --> 00:00:26,02 
 و ما می خواهیم روی آن تمرکز کنیم. 
  
 11 
 00:00:26,02 --> 00:00:29,02 
 با این حال ، اصولی که ما در مورد آنها صحبت خواهیم کرد مربوط به موارد دیگر است 
  
 12 
 00:00:29,02 --> 00:00:32,02 
 سیستم های کنترل منبع نیز 
  
 13 
 00:00:32,02 --> 00:00:35,04 
 Git ابزار زیادی در اطراف خود و بیشتر IDE ها دارد 
  
 14 
 00:00:35,04 --> 00:00:38,02 
 مانند PyCharm یا کد ویژوال استودیو 
  
 15 
 00:00:38,02 --> 00:00:40,06 
 در ادغام با آن ساخته شده اند. 
  
 16 
 00:00:40,06 --> 00:00:43,02 
 من قصد دارم از خط فرمان از Git استفاده کنم. 
  
 17 
 00:00:43,02 --> 00:00:47,06 
 با IDE خود ، مستندات مربوط به نحوه استفاده از آن با Git را بخوانید. 
  
 18 
 00:00:47,06 --> 00:00:49,08 
 Git یک نسخه غیر متمرکز است 
  
 19 
 00:00:49,08 --> 00:00:53,02 
 سیستم کنترل ، معروف به DVCS. 
  
 20 
 00:00:53,02 --> 00:00:55,08 
 این بدان معناست که هرکسی که دارای مخزن Git است 
  
 21 
 00:00:55,08 --> 00:00:59,02 
 در دستگاه آنها تمام تاریخچه پروژه وجود دارد ، 
  
 22 
 00:00:59,02 --> 00:01:02,01 
 و می تواند بدون اتصال به شبکه کار کند. 
  
 23 
 00:01:02,01 --> 00:01:06,01 
 ما قصد داریم از GitHub که میزبان مخازن Git است استفاده کنیم 
  
 24 
 00:01:06,01 --> 00:01:10,09 
 و ویژگی های مدیریت پروژه و موارد دیگر در اطراف آن را ارائه می دهد. 
  
 25 
 00:01:10,09 --> 00:01:12,08 
 بیشتر اوقات ، به یک پروژه می پیوندید 
  
 26 
 00:01:12,08 --> 00:01:15,00 
 و سپس مخزن را کلون می کنید. 
  
 27 
 00:01:15,00 --> 00:01:18,09 
 این پروژه ما به نام nlpy در GitHub است. 
  
 28 
 00:01:18,09 --> 00:01:21,08 
 شما مجوز نوشتن برای این مخزن را ندارید. 
  
 29 
 00:01:21,08 --> 00:01:23,08 
 توصیه می کنم که آنرا چنگ بزنید ، ایجاد کنید 
  
 30 
 00:01:23,08 --> 00:01:26,04 
 کپی خود را انجام دهید و با آن کار کنید. 
  
 31 
 00:01:26,04 --> 00:01:29,05 
 برای این کار به یک کاربر GitHub نیاز دارید. 
  
 32 
 00:01:29,05 --> 00:01:31,03 
 برای دانستن اینکه چه چیزی نیاز به کلون کردن داریم ، 
  
 33 
 00:01:31,03 --> 00:01:36,07 
 ما روی دکمه کلون یا بارگیری کلیک می کنیم و URL را کپی می کنیم. 
  
 34 
 00:01:36,07 --> 00:01:38,06 
 اگر مجوز نوشتن ندارید ، 
  
 35 
 00:01:38,06 --> 00:01:42,01 
 می توانید به جای SSH از HTTPS استفاده کنید. 
  
 36 
 00:01:42,01 --> 00:01:46,07 
 پس از کپی کردن آن ، می توانیم به خط فرمان برویم ، 
  
 37 
 00:01:46,07 --> 00:01:49,03 
 و انجام گیت ، کلون ، 
  
 38 
 00:01:49,03 --> 00:01:52,04 
 و مخزن 
  
 39 
 00:01:52,04 --> 00:01:56,05 
 و Git قصد دارد آن را به پوشه ای بنام nlpy کلون کند. 
  
 40 
 00:01:56,05 --> 00:01:58,06 
 ما می توانیم به این فهرست برویم ، 
  
 41 
 00:01:58,06 --> 00:02:01,02 
 و ببینید که ما پرونده ها را در آنجا داریم. 
  
 42 
 00:02:01,02 --> 00:02:03,08 
 پس از مخزن دستگاه محلی شما ، 
  
 43 
 00:02:03,08 --> 00:02:05,05 
 می توانید تغییرات کد را انجام دهید و سپس 
  
 44 
 00:02:05,05 --> 00:02:08,00 
 آنها را به مخزن اصلی فشار دهید. 
  
 45 
 00:02:08,00 --> 00:02:09,07 
 یک چیز شما باید مطمئن شوید 
  
 46 
 00:02:09,07 --> 00:02:13,03 
 این نیست که پرونده های اشتباه را به Git اضافه کنید. 
  
 47 
 00:02:13,03 --> 00:02:17,04 
 Python فایلهای ذخیره شده Py و PYC استاندارد ایجاد می کند. 
  
 48 
 00:02:17,04 --> 00:02:21,02 
 PyTest دایرکتوری کش .pytest cache و غیره ایجاد کنید. 
  
 49 
 00:02:21,02 --> 00:02:23,06 
 حتماً این فهرستها را حذف کنید 
  
 50 
 00:02:23,06 --> 00:02:26,08 
 یا پرونده های پرونده .gitignore خود را. 
  
 51 
 00:02:26,08 --> 00:02:29,02 
 در اینجا یکی از ما در این پروژه است. 
  
 52 
 00:02:29,02 --> 00:02:32,08 
 گربه .gitignore و می بینیم که نادیده می گیریم 
  
 53 
 00:02:32,08 --> 00:02:35,09 
 PYC ، فرضیه ، انبارهای pytest ، 
  
 54 
 00:02:35,09 --> 00:02:40,00 
 محیط مجازی dist، nlp و موارد دیگر. 
  
